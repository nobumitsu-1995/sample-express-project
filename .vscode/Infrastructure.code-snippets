{
  "コントローラーの作成": {
    "prefix": "controller",
    "body": [
      "import { Request, Response } from 'express'",
      "import { uuid as generateUUID } from '@Infrastructure/UUID'",
      "import prisma from '@Infrastructure/Prisma'",
      "",
      "export default class ${TM_FILENAME_BASE} {",
      "  private readonly ${TM_FILENAME_BASE/(.*)(Controller)/${1:/camelcase}/}ApplicationService: ${TM_FILENAME_BASE/Controller//}ApplicationService",
      "",
      "  constructor() {",
      "    const ${TM_FILENAME_BASE/(.*)(Controller)/${1:/camelcase}/}Factory = new ${TM_FILENAME_BASE/Controller//}Factory(generateUUID)",
      "    const ${TM_FILENAME_BASE/(.*)(Controller)/${1:/camelcase}/}Repository = new ${TM_FILENAME_BASE/Controller//}Repository()",
      "    const ${TM_FILENAME_BASE/(.*)(Controller)/${1:/camelcase}/}Service = new ${TM_FILENAME_BASE/Controller//}Service()",
      "",
      "    this.${TM_FILENAME_BASE/(.*)(Controller)/${1:/camelcase}/}ApplicationService = new ${TM_FILENAME_BASE/Controller//}ApplicationService()",
      "  }",
      "",
      "  public get = async (req: Request, res: Response) => {",
      "    const id = req.params.id",
      "    const command = new ${TM_FILENAME_BASE/Controller//}GetCommand({ id })",
      "",
      "    this.${TM_FILENAME_BASE/(.*)(Controller)/${1:/camelcase}/}ApplicationService.get(command)",
      "      .then((${TM_FILENAME_BASE/(.*)(Controller)/${1:/camelcase}/}) => {",
      "        return res.status(200).json(${TM_FILENAME_BASE/(.*)(Controller)/${1:/camelcase}/})",
      "      })",
      "      .catch((error) => {",
      "        console.log(error)",
      "        return res.status(404).json(error)",
      "      })",
      "  }",
      "}",
      "",
    ],
    "description": "コントローラーの作成",
  },
  "コントローラーメソッドの作成": {
    "prefix": "controllerMethod",
    "body": [
      "public ${1:method} = async (req: Request, res: Response) => {",
      "  try {",
      "    const id = req.params.id",
      "    const command = new ${TM_FILENAME_BASE/Controller//}GetCommand({ id })",
      "    const ${TM_FILENAME_BASE/(.*)(Controller)/${1:/camelcase}/} = await this.${TM_FILENAME_BASE/(.*)(Controller)/${1:/camelcase}/}ApplicationService.get(command)",
      "",
      "    return res.status(200).json(${TM_FILENAME_BASE/(.*)(Controller)/${1:/camelcase}/})",
      "  } catch (error) {",
      "    console.log(error)",
      "    return res.status(404).json(error)",
      "  }",
      "}",
    ],
    "description": "コントローラーの作成",
  },
  "リポジトリの作成": {
    "prefix": "repository",
    "body": [
      "import { Prisma, PrismaClient } from '@prisma/client'",
      "",
      "type ${TM_FILENAME_BASE}Props = {",
      "  prisma: PrismaClient",
      "  ${TM_FILENAME_BASE/(.*)(Repository)/${1:/camelcase}/}Factory: I${TM_FILENAME_BASE/Repository//}Factory",
      "}",
      "export default class ${TM_FILENAME_BASE} implements I${TM_FILENAME_BASE} {",
      "  private readonly prisma: PrismaClient",
      "  private readonly ${TM_FILENAME_BASE/(.*)(Repository)/${1:/camelcase}/}Factory: I${TM_FILENAME_BASE/Repository//}Factory",
      "",
      "  constructor({ prisma, ${TM_FILENAME_BASE/(.*)(Repository)/${1:/camelcase}/}Factory }: ${TM_FILENAME_BASE}Props) {",
      "    this.prisma = prisma",
      "    this.${TM_FILENAME_BASE/(.*)(Repository)/${1:/camelcase}/}Factory = ${TM_FILENAME_BASE/(.*)(Repository)/${1:/camelcase}/}Factory",
      "  }",
      "",
      "  public async findById(id: ${TM_FILENAME_BASE/Repository//}Id): Promise<${TM_FILENAME_BASE/Repository//} | null> {",
      "    const ${TM_FILENAME_BASE/(.*)(Repository)/${1:/camelcase}/} = await this.prisma.${TM_FILENAME_BASE/(.*)(Repository)/${1:/camelcase}/}.findUnique({",
      "      where: { id: id.get() },",
      "      include: { members: true },",
      "    })",
      "",
      "    if (!${TM_FILENAME_BASE/(.*)(Repository)/${1:/camelcase}/}) {",
      "      return null",
      "    }",
      "",
      "    return this.${TM_FILENAME_BASE/(.*)(Repository)/${1:/camelcase}/}Factory.createFromData(${TM_FILENAME_BASE/(.*)(Repository)/${1:/camelcase}/})",
      "  }",
      "}",
      "",
    ],
    "description": "リポジトリの作成",
  },
  "ルーターの作成": {
    "prefix": "router",
    "body": [
      "import { Router } from 'express'",
      "import ${TM_FILENAME_BASE/(.*)(Router)/${1:/pascalcase}/}Controller from '@Infrastructure/Controller/${TM_FILENAME_BASE/(.*)(Router)/${1:/pascalcase}/}Controller'",
      "",
      "const ${TM_FILENAME_BASE/Router//}Controller = new ${TM_FILENAME_BASE/(.*)(Router)/${1:/pascalcase}/}Controller()",
      "",
      "export const ${TM_FILENAME_BASE} = Router()",
      "",
      "${TM_FILENAME_BASE}.get('/:id', ${TM_FILENAME_BASE/Router//}Controller.get)",
      "${TM_FILENAME_BASE}.post('/', ${TM_FILENAME_BASE/Router//}Controller.create)",
      "${TM_FILENAME_BASE}.patch('/:id', ${TM_FILENAME_BASE/Router//}Controller.update)",
      "${TM_FILENAME_BASE}.delete('/:id', ${TM_FILENAME_BASE/Router//}Controller.delete)",
      "",
    ],
    "description": "ルーターの作成",
  },
}
